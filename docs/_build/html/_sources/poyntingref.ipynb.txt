{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# # The Local Refraction Approximation"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Local Refraction Approximation is base on the idea of approximating the refraction of an electromagnetic field across an interface by estimating a local angle of incidence through the direction of the average Poynting vector field. \n",
    "\n",
    "After this direction of incidence is approximated in this fashion, the refracted and reflected fields are calculated using the Fresnel coefficients.\n",
    "\n",
    "The transmitt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n",
      "Warning disabling RuntimeWarning often due to evalution of square roots with negative arguments.\n",
      "Probably produced by scalar_root.\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "import sys\n",
    "codebase_dir = '/Users/juan/ZiaLab/Codebase'\n",
    "sys.path.append(codebase_dir)\n",
    "import wavesight as ws\n",
    "import numpy as np\n",
    "from scipy import special\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm.notebook import tqdm\n",
    "from scipy.optimize import fsolve, root_scalar\n",
    "import cmasher as cm\n",
    "from matplotlib.colors import LogNorm\n",
    "from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable\n",
    "%config InlineBackend.figure_format='retina'\n",
    "import warnings\n",
    "print(\"Warning disabling RuntimeWarning often due to evalution of square roots with negative arguments.\\nProbably produced by scalar_root.\")\n",
    "warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n",
    "import pickle\n",
    "from matplotlib.patches import Circle\n",
    "import matplotlib.ticker as ticker\n",
    "import cmasher as cm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
